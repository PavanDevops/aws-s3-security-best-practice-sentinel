import "strings"
import "types"

outputs = {}

_modules = {
	"root": {
		"data": {},
		"path": [],
		"resources": {
			"aws_s3_bucket": {
				"macgroup-dev-s3": {
					0: {
						"attr": {
							"acceleration_status": "",
							"acl":                                  "private",
							"arn":                                  "arn:aws:s3:::macgroup-dev-s3",
							"bucket":                               "macgroup-dev-s3",
							"bucket_domain_name":                   "macgroup-dev-s3.s3.amazonaws.com",
							"bucket_prefix":                        null,
							"bucket_regional_domain_name":          "macgroup-dev-s3.s3.ap-southeast-2.amazonaws.com",
							"cors_rule":                            [],
							"force_destroy":                        false,
							"hosted_zone_id":                       "Z1WCIGYICN2BYD",
							"id":                                   "macgroup-dev-s3",
							"lifecycle_rule":                       [],
							"logging":                              [],
							"object_lock_configuration":            [],
							"policy":                               null,
							"region":                               "ap-southeast-2",
							"replication_configuration":            [],
							"request_payer":                        "BucketOwner",
							"server_side_encryption_configuration": [],
							"tags": {
								"Environment": "Dev",
								"Name":        "macgroup-dev-s3",
							},
							"versioning": [
								{
									"enabled":    false,
									"mfa_delete": false,
								},
							],
							"website":          [],
							"website_domain":   null,
							"website_endpoint": null,
						},
						"depends_on": [],
						"id":         "macgroup-dev-s3",
						"tainted":    false,
					},
				},
				"macgroup-prod-s3": {
					0: {
						"attr": {
							"acceleration_status": "",
							"acl":                                  "authenticated-read",
							"arn":                                  "arn:aws:s3:::macgroup-prod-s3",
							"bucket":                               "macgroup-prod-s3",
							"bucket_domain_name":                   "macgroup-prod-s3.s3.amazonaws.com",
							"bucket_prefix":                        null,
							"bucket_regional_domain_name":          "macgroup-prod-s3.s3.ap-southeast-2.amazonaws.com",
							"cors_rule":                            [],
							"force_destroy":                        false,
							"hosted_zone_id":                       "Z1WCIGYICN2BYD",
							"id":                                   "macgroup-prod-s3",
							"lifecycle_rule":                       [],
							"logging":                              [],
							"object_lock_configuration":            [],
							"policy":                               null,
							"region":                               "ap-southeast-2",
							"replication_configuration":            [],
							"request_payer":                        "BucketOwner",
							"server_side_encryption_configuration": [],
							"tags": {
								"Environment": "Prod",
								"Name":        "macgroup-prod-s3",
							},
							"versioning": [
								{
									"enabled":    false,
									"mfa_delete": false,
								},
							],
							"website":          [],
							"website_domain":   null,
							"website_endpoint": null,
						},
						"depends_on": [],
						"id":         "macgroup-prod-s3",
						"tainted":    false,
					},
				},
			},
		},
	},
}

module_paths = [
	[],
]

terraform_version = "0.12.21"

module = func(path) {
	if types.type_of(path) is not "list" {
		error("expected list, got", types.type_of(path))
	}

	if length(path) < 1 {
		return _modules.root
	}

	addr = []
	for path as p {
		append(addr, "module")
		append(addr, p)
	}

	return _modules[strings.join(addr, ".")]
}

data = _modules.root.data
path = _modules.root.path
resources = _modules.root.resources
